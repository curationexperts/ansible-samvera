---
# ROLE: first_deploy
# roles/first_deploy/tasks/main.yml
#
# Runs the first Capistrano managed deployment
# Usage:
#    - { role: first_deploy, project_name: *required*, branch: <optional> }
#
# Does a minimal install of a codebase from development mode to bootstrap a capistrano deployment
# The codebase being deployed must be capified and have a config/deploy/localhost.rb stage file
- name: remove previous known_hosts file
  file:
    path: /home/{{ ansible_ssh_user }}/.ssh/known_hosts
    state: absent

- name: "create shared project directory"
  become: yes
  file: path=/opt/{{ project_name }} owner=deploy group=deploy state=directory

- name: generate rails secret
  command: openssl rand -hex 64
  register: rails_secret

- name: create shared config files
  become: yes
  template: src={{ item }}.j2 dest=/opt/{{ project_name }}/shared/config/{{ item }} owner=deploy group=deploy backup=no
  with_items:
      - database.yml
      - secrets.yml

- name: default repo name
  set_fact:
    default_repo_name: "https://github.com/curationexperts/{{ project_name }}.git"

- name: remove any previously checked out git branch
  become: yes
  file:
    path: /home/{{ ansible_ssh_user }}/{{ project_name }}
    state: absent

- name: clone repo
  git:
      repo: "{{ repo_url | default(default_repo_name) }}"
      dest: /home/{{ ansible_ssh_user }}/{{ project_name }}

- name: checkout branch
  shell: git checkout {{ branch | default('main') }}
  args:
    chdir: /home/{{ ansible_ssh_user }}/{{ project_name }}

- name: install ed25519 support
  become_user: ubuntu
  gem:
    name: ed25519
    version: 1.2.4
    state: present
    user_install: yes

- name: install bcrypt_pbkdf support
  become_user: ubuntu
  gem:
    name: bcrypt_pbkdf
    version: 1.1.0
    state: present
    user_install: yes

- name: find bundler version from Gemfile.lock
  shell: grep -A 1 "BUNDLED WITH" Gemfile.lock
  args:
    chdir: /home/{{ ansible_ssh_user }}/{{ project_name }}
  register: bundler_version_phrase

- name: set bundler version from Gemfile.lock
  set_fact:
    bundler_version: "{{ bundler_version_phrase.stdout | regex_replace('BUNDLED WITH\n   (.*)', '\\1') }}"

- name: display bundler version
  debug:
    msg: "{{ bundler_version }}"

- name: check if bundler {{ bundler_version }} is installed
  shell: bundler --version | grep {{ bundler_version }}
  ignore_errors: true
  register: bundler_preinstalled

- name: install bundler if it-s not already there
  block:
    # bundler is a system gem in ruby 2.6 and later, so need to move it in order to
    # uninstall default bundler and install project bundler

    - name: set Gem default directory
      shell: ruby -e 'puts Gem.default_dir'
      register: gem_directory

    - name: move system bundler
      become: yes
      shell: mv -v "{{ gem_directory.stdout }}"/specifications/default/bundler-*.gemspec "{{ gem_directory.stdout }}"/specifications/
      ignore_errors: true

    - name: remove system bundler
      become: yes
      shell: y | gem uninstall bundler --force

    - name: install project bundler
      become: yes
      shell: gem install bundler -v "{{ bundler_version }}"
  when: bundler_preinstalled.failed

- name: install gems (bundle install)
  become: yes
  shell: bundle install
  args:
    chdir: /home/{{ ansible_ssh_user }}/{{ project_name }}

  # Set up a keypair so the ansible user can connect as the capistrano deploy user
- name: create deployment keypair for connection user
  user:
      name: "{{ ansible_ssh_user }}"
      generate_ssh_key: yes
      ssh_key_file: .ssh/id_rsa

- name: read public key
  slurp:
      src: /home/{{ ansible_ssh_user }}/.ssh/id_rsa.pub
  register: public_key

- name: add public key to deploy user
  become: yes
  authorized_key:
      user: deploy
      key: "{{ public_key.content | b64decode }}"

- name: ensure ansible user is in the deploy group
  become: yes
  user:
    append: yes
    groups: deploy
    name: "{{ ansible_ssh_user }}"

- name: ensure ansible user can write to capistrano log and it exists
  become: yes
  file:
    path: /home/{{ ansible_ssh_user }}/{{ project_name }}/log/capistrano.log
    owner: "{{ansible_ssh_user}}"
    mode: '0775'
    state: touch

- name: create apache vhosts file
  become: yes
  template: src=apache_vhost.j2 dest=/etc/apache2/sites-enabled/{{ project_name }}.conf owner=root group=root backup=no

- name: create apache vhostsssl file
  become: yes
  template: src=apache_vhost-le.j2 dest=/etc/apache2/sites-enabled/{{ project_name }}-le-ssl.conf owner=root group=root backup=no

- name: install certbot
  become: yes
  package: name={{ item }} state=present
  with_items:
    - certbot
    - python3-certbot-apache

- name: set up letsencrypt
  become: yes
  command: certbot --noninteractive -m sysadmin@curationexperts.com --redirect --agree-tos --apache run -d {{ hostname }}.{{ domain  }}

- name: restart apache to load new virtual host
  become: yes
  service: name=apache2 state=restarted

- name: create solr config dir
  become: yes
  file: path=/var/solr/data/{{ project_name }}/conf owner=solr group=solr state=directory

- name: temporary symlink schema from git checkout to solr - managed-schema
  become: yes
  file: src=/home/{{ ansible_ssh_user }}/{{ project_name }}/solr/config/schema.xml dest=/var/solr/data/{{ project_name }}/conf/managed-schema state=link force=yes

- name: temporary symlink schema from git checkout to solr - schema.xml
  become: yes
  file: src=/home/{{ ansible_ssh_user }}/{{ project_name }}/solr/config/schema.xml dest=/var/solr/data/{{ project_name }}/conf/schema.xml state=link force=yes

- name: temporary symlink solrconfig from git checkout to solr
  become: yes
  file: src=/home/{{ ansible_ssh_user }}/{{ project_name }}/solr/config/solrconfig.xml dest=/var/solr/data/{{ project_name }}/conf/solrconfig.xml state=link force=yes

- name: restart solr
  become: true
  service: name=solr state=restarted

- name: deploy to production directories with capistrano
  shell: BRANCH={{ branch | default('main') }} cap localhost deploy
  args:
    chdir: /home/{{ ansible_ssh_user }}/{{ project_name }}

- name: symlink solrconfig from code to solr
  become: yes
  file: src=/opt/{{ project_name }}/current/solr/config/solrconfig.xml dest=/var/solr/data/{{ project_name }}/conf/solrconfig.xml state=link force=yes

- name: symlink schema from code to solr - managed-schema
  become: yes
  file: src=/opt/{{ project_name }}/current/solr/config/schema.xml dest=/var/solr/data/{{ project_name }}/conf/managed-schema state=link force=yes

- name: symlink schema from git checkout to solr - schema.xml
  become: yes
  file: src=/home/{{ ansible_ssh_user }}/{{ project_name }}/solr/config/schema.xml dest=/var/solr/data/{{ project_name }}/conf/schema.xml state=link force=yes

- name: restart solr
  become: true
  service: name=solr state=restarted

- name: restart apache to load newly configured passenger application
  become: yes
  service: name=apache2 state=restarted
