---
# ROLE: solr
# roles/solr/tasks/main.yml
#
# installs solr in production mode
#

- name: check for existing solr
  uri: 
    url: http://localhost:8983/solr/admin/info/system 
    return_content: true
  register: solr_info
  ignore_errors: true
  
- name: save running Solr version
  set_fact:
    running_version: "{{ solr_info.json.lucene['solr-spec-version'] | default('none') }}"
  
- name: installed Solr version
  debug:
    var: running_version

- name: setup install directory
  set_fact:
    install_path: /home/{{ ansible_ssh_user }}/install

- name: ensure install directory exists
  file:
    path: '{{ install_path }}'
    state: directory

- name: set solr archive for versions before 9.0
  set_fact:
    solr_archive_path: https://archive.apache.org/dist/lucene/solr
    when: solr_version is version('9.0', '<')

- name: set solr archive for versions 9.0 and above
  set_fact:
    solr_archive_path: https://archive.apache.org/dist/solr/solr
  when: solr_version is version('9.0', '>=')

- name: get solr checksum
  uri:
    url: "{{solr_archive_path}}/{{ solr_version }}/solr-{{ solr_version }}.tgz.sha512"
    return_content: true
  register: solr_checksum

- name: download solr {{ solr_version }} tarball
  get_url: 
    url: "{{solr_archive_path}}/{{ solr_version }}/solr-{{ solr_version }}.tgz"
    dest: "{{ install_path }}/solr-{{ solr_version }}.tgz"
    force: no
    checksum: "sha512:{{ solr_checksum.content.split(' ')[0] }}"

- name: extract solr service installer
  unarchive: 
    src: "{{ install_path }}/solr-{{ solr_version }}.tgz"
    dest: "{{ install_path }}/"
    include: "solr-{{ solr_version}}/bin/install_solr_service.sh"
    creates: "{{ install_path }}/solr-{{ solr_version }}/bin/install_solr_service.sh"
    copy: no

- name: run solr service install script
  become: yes
  shell: bash {{ install_path }}/solr-{{ solr_version }}/bin/install_solr_service.sh {{ install_path }}/solr-{{ solr_version }}.tgz -f -d /opt/solrdata
  when: solr_version != running_version
